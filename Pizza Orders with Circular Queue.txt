Pizza Orders with Circular Queue

#include <iostream>
#define MAX 5 // Maximum number of orders

using namespace std;

class CircularQueue {
    int orders[MAX];
    int front, rear, count;

public:
    CircularQueue() {
        front = -1;
        rear = -1;
        count = 0;
    }

    // Function to check if the queue is full
    bool isFull() {
        return (count == MAX);
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return (count == 0);
    }

    // Function to place an order (enqueue)
    void placeOrder(int orderID) {
        if (isFull()) {
            cout << "Cannot place order. Maximum orders reached!\n";
            return;
        }

        if (front == -1) {
            front = 0;
        }

        rear = (rear + 1) % MAX;
        orders[rear] = orderID;
        count++;
        cout << "Order " << orderID << " placed successfully.\n";
    }

    // Function to serve an order (dequeue)
    void serveOrder() {
        if (isEmpty()) {
            cout << "No orders to serve!\n";
            return;
        }

        cout << "Order " << orders[front] << " is served.\n";
        front = (front + 1) % MAX;
        count--;
    }

    // Function to display all the orders
    void displayOrders() {
        if (isEmpty()) {
            cout << "No orders in the queue!\n";
            return;
        }

        cout << "Current orders: ";
        int i = front;
        for (int j = 0; j < count; j++) {
            cout << orders[i] << " ";
            i = (i + 1) % MAX;
        }
        cout << endl;
    }
};

int main() {
    CircularQueue pq;

    pq.placeOrder(101);
    pq.placeOrder(102);
    pq.placeOrder(103);
    pq.placeOrder(104);
    pq.placeOrder(105);

    pq.displayOrders();

    pq.serveOrder();
    pq.serveOrder();

    pq.displayOrders();

    pq.placeOrder(106);
    pq.placeOrder(107);

    pq.displayOrders();

    return 0;
}
